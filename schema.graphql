schema {
  query: Query
  mutation: Mutation
}

interface Node {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  endCursor: String
  startCursor: String
}

type Query {
  node(id: ID!): String!
  user(id: ID!): User!
  currentUser: User!
  item(id: ID!): Item!
  items: [Item!]
  orders: [Order!]
}

type Mutation {
  noop(input: NoopInput): NoopPayload
  createUser(input: CreateUserInput!): CreateUserPayload!
  signin(input: SigninInput!): SigninPayload!
  createItem(input: CreateItemInput!): CreateItemPayload!
  updateItem(input: UpdateItemInput!): UpdateItemPayload!
  deleteItem(input: DeleteItemInput!): DeleteItemPayload!
  createOrder(input: CreateOrderInput!): CreateOrderPayload!
}

input NoopInput {
  clientMutationId: String
}

type NoopPayload {
  clientMutationId: String
}

type User {
  id: ID!
  email: String!
  point: Int!
  items: [Item!]
}

type Item {
  id: ID!
  name: String!
  point: Int!
  username: String
  userId: ID!
}

type Order {
  id: ID!
  name: String!
  point: Int!
  buyer: String!
  seller: String!
  createdAt: String!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
}

type CreateUserPayload {
  user: User!
}

input SigninInput {
  email: String!
  password: String!
}

type SigninPayload {
  user: User!
  userToken: String!
}

input CreateItemInput {
  name: String!
  point: Int!
}

type CreateItemPayload {
  item: Item!
}

input UpdateItemInput {
  id: ID!
  name: String!
  point: Int!
}

type UpdateItemPayload {
  item: Item!
}

input DeleteItemInput {
  id: ID!
}

type DeleteItemPayload {
  deletedItemId: ID!
}

input CreateOrderInput {
  itemId: ID!
}

type CreateOrderPayload {
  order: Order!
  buyer: User!
  seller: User!
}
